// Script to check current database schema
// Run this with: node scripts/check-db-schema.js

import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";

// Load environment variables
dotenv.config({ path: ".env.local" });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error("Missing Supabase environment variables");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkDatabaseSchema() {
  try {
    console.log("üîç Checking database schema...\n");

    // Check if profiles table exists and its structure
    console.log("üìã Checking profiles table...");
    const { data: profilesData, error: profilesError } = await supabase
      .from("profiles")
      .select("*")
      .limit(1);

    if (profilesError) {
      console.error("‚ùå Profiles table error:", profilesError.message);

      // Try to create the profiles table if it doesn't exist
      if (profilesError.message.includes("does not exist")) {
        console.log("üõ†Ô∏è  Creating profiles table...");

        const { error: createError } = await supabase.rpc("exec_sql", {
          sql: `
            CREATE TABLE IF NOT EXISTS public.profiles (
              id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
              created_at timestamp with time zone DEFAULT now() NOT NULL,
              user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
              username text NOT NULL UNIQUE,
              name text,
              dob date,
              city text,
              bio text,
              avatar_url text,
              updated_at timestamp with time zone DEFAULT now()
            );
            
            -- Enable RLS
            ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
            
            -- Create policies
            CREATE POLICY IF NOT EXISTS profiles_read_public ON public.profiles
              FOR SELECT USING (true);
              
            CREATE POLICY IF NOT EXISTS profiles_modify_own ON public.profiles
              FOR ALL USING (user_id = auth.uid()) WITH CHECK (user_id = auth.uid());
          `,
        });

        if (createError) {
          console.log(
            "‚ö†Ô∏è  Could not create table via RPC, trying direct SQL..."
          );
          // We'll handle this differently
        } else {
          console.log("‚úÖ Profiles table created successfully!");
        }
      }
    } else {
      console.log("‚úÖ Profiles table exists");
      if (profilesData && profilesData.length > 0) {
        console.log("üìä Sample profile data:", profilesData[0]);
        console.log("üîë Available columns:", Object.keys(profilesData[0]));
      }
    }

    // Check what tables exist
    console.log("\nüìã Checking all tables...");
    const { data: tablesData, error: tablesError } = await supabase
      .from("information_schema.tables")
      .select("table_name")
      .eq("table_schema", "public");

    if (tablesError) {
      console.log("‚ö†Ô∏è  Could not query information_schema, but that's okay");
    } else {
      console.log(
        "üìä Available tables:",
        tablesData.map((t) => t.table_name)
      );
    }

    // Try to insert a test profile
    console.log("\nüß™ Testing profile creation...");
    const testUserId = "57e8b61e-c9fc-416c-8d0d-cbb02e78e100";

    const { data: insertData, error: insertError } = await supabase
      .from("profiles")
      .upsert({
        user_id: testUserId,
        username: "mackvali_test",
        name: "Mack Vali",
        bio: "Test User",
      })
      .select()
      .single();

    if (insertError) {
      console.error("‚ùå Profile creation failed:", insertError.message);

      // If it's a column error, let's add the missing columns
      if (
        insertError.message.includes("column") &&
        insertError.message.includes("does not exist")
      ) {
        console.log("üõ†Ô∏è  Adding missing columns...");

        const columnsToAdd = [
          "name text",
          "dob date",
          "city text",
          "bio text",
          "avatar_url text",
          "updated_at timestamp with time zone DEFAULT now()",
        ];

        for (const columnDef of columnsToAdd) {
          try {
            const columnName = columnDef.split(" ")[0];
            const { error: alterError } = await supabase.rpc("exec_sql", {
              sql: `ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS ${columnDef}`,
            });

            if (alterError) {
              console.log(
                `‚ö†Ô∏è  Could not add column ${columnName}:`,
                alterError.message
              );
            } else {
              console.log(`‚úÖ Added column ${columnName}`);
            }
          } catch (e) {
            console.log(
              `‚ö†Ô∏è  Could not add column ${columnDef.split(" ")[0]}:`,
              e.message
            );
          }
        }

        // Try the insert again
        console.log("\nüîÑ Retrying profile creation...");
        const { data: retryData, error: retryError } = await supabase
          .from("profiles")
          .upsert({
            user_id: testUserId,
            username: "mackvali_test",
            name: "Mack Vali",
            bio: "Test User",
          })
          .select()
          .single();

        if (retryError) {
          console.error(
            "‚ùå Profile creation still failed:",
            retryError.message
          );
        } else {
          console.log(
            "‚úÖ Profile created successfully after adding columns:",
            retryData
          );
        }
      }
    } else {
      console.log("‚úÖ Profile created successfully:", insertData);
    }
  } catch (error) {
    console.error("üí• Unexpected error:", error);
  }
}

checkDatabaseSchema();
